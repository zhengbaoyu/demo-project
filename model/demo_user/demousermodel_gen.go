// Code generated by goctl. DO NOT EDIT!

package demo_user

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	demoUserFieldNames          = builder.RawFieldNames(&DemoUser{})
	demoUserRows                = strings.Join(demoUserFieldNames, ",")
	demoUserRowsExpectAutoSet   = strings.Join(stringx.Remove(demoUserFieldNames, "`id`", "`create_time`", "`update_time`"), ",")
	demoUserRowsWithPlaceHolder = strings.Join(stringx.Remove(demoUserFieldNames, "`id`", "`create_time`", "`update_time`"), "=?,") + "=?"
)

type (
	demoUserModel interface {
		Insert(ctx context.Context, data *DemoUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*DemoUser, error)
		FindOneByUserName(ctx context.Context, userName string) (*DemoUser, error)
		Update(ctx context.Context, data *DemoUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultDemoUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	DemoUser struct {
		Id        int64     `db:"id"`
		UserName  string    `db:"user_name"` // 用户名
		Password  string    `db:"password"`  // 密码
		Email     string    `db:"email"`     // 邮箱
		Avatar    string    `db:"avatar"`    // 头像
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newDemoUserModel(conn sqlx.SqlConn) *defaultDemoUserModel {
	return &defaultDemoUserModel{
		conn:  conn,
		table: "`demo_user`",
	}
}

func (m *defaultDemoUserModel) Insert(ctx context.Context, data *DemoUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, demoUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserName, data.Password, data.Email, data.Avatar, data.CreatedAt, data.UpdatedAt)
	return ret, err
}

func (m *defaultDemoUserModel) FindOne(ctx context.Context, id int64) (*DemoUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", demoUserRows, m.table)
	var resp DemoUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDemoUserModel) FindOneByUserName(ctx context.Context, userName string) (*DemoUser, error) {
	var resp DemoUser
	query := fmt.Sprintf("select %s from %s where `user_name` = ? limit 1", demoUserRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userName)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDemoUserModel) Update(ctx context.Context, data *DemoUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, demoUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserName, data.Password, data.Email, data.Avatar, data.CreatedAt, data.UpdatedAt, data.Id)
	return err
}

func (m *defaultDemoUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultDemoUserModel) tableName() string {
	return m.table
}
